{"version":3,"sources":["webpack:///./src/utils/mixin.js","webpack:///./src/utils/codeType.js"],"names":["pagerMixin","activated","this","$nextTick","z_method","refreshSpread","data","pagination","currentPage","total","pageSize","optionsClone","options","btnDisabled","exportObj","visible","sum","current","fileName","excelData","requestMode","requestUrl","requestPageSize","checklistData","isLayering","isQs","billsCode","sbc","mounted","methods","query","console","log","fetchData","val","page","JSON","stringify","pageParam","msg","exportCsv","_this","closeDialog","searchExport","tableData","length","cloneDeep","num","Math","ceil","exportSync","url","exportPost","exportGet","post","then","res","exportNormal","catch","exportError","postJson","get","code","list","calculation","ischeckrow","checklistExport","clearBtnDisabled","type","$message","showClose","message","duration","formatterFunc","arr","cellValue","result","filter","item","value","label","exportCsvUtils","exportBasicUtils","paramObj","setTimeout","totalRow","isBillCode","finished","paramIn","exportByPage","methodType","params","axiosConfig","callback","param","currentTotal","totalPage","startDateKey","endDateKey","allEndDate","queryInternal","interval","start","Date","getTime","end","addSeconds","date","moment","add","format","userTypeCodeClone","key","deductionModeCode","deductStatusCode","settlementStatusCode","settlementStatusCode2","signStatusCode","signStatusCodes","isnotStatusCode","isAvgStatusCode","transactionType","fromType","billTypeCode2","deductStatusCode2","billsTypeCode","deductionStatusCode","transportTypeCode","goodsTypeCode","mbillTypeCode","payFeeBillTypeCode","dataSourceCode","signCode","feeTypeCode","billsTypeCodesNow","deductionModel","feeStatusCode","ztStatusCode","valueAddedTypeCode","contractStatusType","subjectTypeTypes","contractTypesType","customerStatusType","accountCycleType"],"mappings":"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","file":"js/chunk-d956ec24.3d365ed0.js","sourcesContent":["// import moment from 'moment'\nimport {\n  get,\n  post,\n  axiosConfig,\n  postJson\n} from '@/config/axios.config';\nimport {\n  cloneDeep\n} from 'lodash';\nimport moment from 'moment';\nexport const pagerMixin = {\n  activated() {\n    this.$nextTick(() => {\n      this.z_method.refreshSpread()\n    })\n  },\n  data() {\n    return {\n      // 翻页\n      pagination: {\n        currentPage: 1,\n        total: 0,\n        pageSize: 100,\n      }, // 分页参数\n      optionsClone: {},\n      options: {},\n      // 导出\n      btnDisabled: false, // 控制是否能点击按钮\n      exportObj: {\n        visible: false,\n        sum: 1, //一共获取数据的总次数\n        current: 0, //当前获取第几次数据\n        fileName: '导出文件名',\n        excelData: [],\n      },\n      // 导出请求方式，请求链接，请求条数\n      requestMode: 'post',\n      requestUrl: '/',\n      requestPageSize: 5000,\n      // 勾选下载数据 或但也下载数据\n      checklistData: [],\n      isLayering: false, // 分页和参数是否分开传\n      isQs: true, // 是否按照表单传值方式， false是json传值\n      billsCode: '',\n      sbc: '',\n    };\n  },\n  mounted() {},\n  methods: {\n    query() {\n      console.log('000000');\n      // throw new Error('component must implement query method')\n    },\n    // 页数变化和当前页变化\n    fetchData(val) {\n      this.pagination = {\n        ...this.pagination,\n        pageSize: val.pageSize ? val.pageSize : this.pagination.pageSize,\n        currentPage: val.page ? val.page : 1,\n      };\n      // if (val.page) {\n      //   this.pagination.currentPage = val.page\n      // }\n      let options = {};\n      if (JSON.stringify(this.optionsClone) == '{}') {\n        this.msg('请先查询');\n        return;\n      }\n      if (this.isLayering) {\n        options = {\n          ...this.optionsClone,\n          pageParam: {\n            pageSize: this.pagination.pageSize,\n            currentPage: this.pagination.currentPage,\n          },\n        };\n      } else {\n        options = {\n          ...this.optionsClone,\n          pageSize: this.pagination.pageSize,\n          currentPage: this.pagination.currentPage,\n        };\n      }\n      this.query(options);\n    },\n    // 导出\n    exportCsv(_this) {\n      _this.exportObj.visible = true; //显示msg框\n    },\n    closeDialog(val) {\n      this.exportObj.visible = val;\n      this.exportObj.current = 1;\n    },\n    searchExport() {\n      this.btnDisabled = true;\n      if (this.tableData.length === 0) {\n        this.msg('没有数据无法导出！');\n        this.btnDisabled = false;\n        return;\n      }\n      let options = cloneDeep(this.optionsClone);\n      // this.searchExportIn(this.pagination.total, options);\n      if (this.pagination.total > 200000) {\n        this.msg('导出失败，本次数据超过20W条，请分批导出！');\n        this.btnDisabled = false;\n        return;\n      }\n      let num = Math.ceil(this.pagination.total / this.requestPageSize);\n      // 需要导出多少次\n      this.exportObj.sum = num;\n      this.exportObj.current = 0;\n      this.exportSync(0, num, options, this.requestUrl);\n    },\n    exportSync(currentPage, num, options, url) {\n      if (currentPage == num) {\n        this.btnDisabled = false;\n        // 当页数等于总次数，则结束循环\n        return;\n      }\n      ++currentPage;\n      // 区别后端传值的方式\n      if (this.isLayering) {\n        options.pageParam.pageSize = this.requestPageSize;\n        options.pageParam.currentPage = currentPage;\n      } else {\n        options.pageSize = this.requestPageSize;\n        options.currentPage = currentPage;\n      }\n      if (this.requestMode == 'post') {\n        this.exportPost(num, currentPage, options, url);\n      } else {\n        this.exportGet(num, currentPage, options, url);\n      }\n    },\n    // post导出\n    exportPost(num, currentPage, options, url) {\n      if (this.isQs) {\n        post(url, options, this.isQs)\n          .then(res => {\n            this.exportNormal(res, num, currentPage, options, url);\n          })\n          .catch(res => {\n            this.exportError(num);\n          });\n      } else {\n        postJson(url, options)\n          .then(res => {\n            this.exportNormal(res, num, currentPage, options, url);\n          })\n          .catch(res => {\n            this.exportError(num);\n          });\n      }\n    },\n    // get的导出\n    exportGet(num, currentPage, options, url) {\n      get(url, options, this.isQs)\n        .then(res => {\n          this.exportNormal(res, num, currentPage, options, url);\n        })\n        .catch(res => {\n          this.exportError(num);\n        });\n    },\n    // 正常导出\n    exportNormal(res, num, currentPage, options, url) {\n      if (res.code != 0) {\n        res.data.list = [];\n      }\n      if (this.sbc === 'sendMailFeeOrPayFeeDetail') {\n        res.data.list = this.calculation(res.data.list);\n      }\n      if (this.sbc === 'sendReceiveFeeSummary') {\n        res.data.list = this.ischeckrow(res.data.list);\n      }\n      this.exportObj = {\n        ...this.exportObj,\n        sum: num, //一共获取数据的总次数\n        current: currentPage, //当前获取第几次数据\n        excelData: res.data.list,\n      };\n      // 递归 尾递归\n      this.exportCsv(this);\n      this.exportSync(currentPage, num, options, url);\n    },\n    // 出错的导出\n    exportError(num) {\n      this.btnDisabled = false;\n      this.msg('网络出错，导出部分数据');\n      this.exportObj = {\n        ...this.exportObj,\n        sum: num, //一共获取数据的总次数\n        current: num, //当前获取第几次数据\n      };\n      this.exportObj.excelData = [];\n      this.exportCsv(this);\n    },\n    // 导出当前页方法\n    checklistExport() {\n      this.btnDisabled = true;\n      if (this.checklistData == '') {\n        this.msg('没有数据无法导出');\n        this.btnDisabled = false;\n        return;\n      }\n      if (this.checklistData.length > 100000) {\n        this.msg('数据量太大，请优化查询条件');\n        this.btnDisabled = false;\n        return;\n      }\n      this.exportObj = {\n        ...this.exportObj,\n        sum: 1, //一共获取数据的总次数\n        current: 1, //当前获取第几次数据\n        excelData: this.checklistData,\n      };\n      this.exportCsv(this);\n      this.btnDisabled = false;\n    },\n    // 清除详细下载的按钮固定\n    clearBtnDisabled() {\n      this.btnDisabled = false;\n    },\n    msg(val, type = 'warning') {\n      this.$message({\n        showClose: true,\n        message: val,\n        type: type,\n        duration: 3000,\n      });\n    },\n      formatterFunc(arr, cellValue) {\n        //表格formatter通用filter\n          const result = arr.filter(item => item.value === cellValue)\n          return result.length > 0 ? result[0].label : '-'\n      }\n  },\n};\n\n/**\n * 使用本方法需要页面自带csv组件，并且head需要写好\n */\n/**\n * @param paramIn 传进来的查询参数 必须\n * @param totalRow 查询的数据的总条数  必须\n * @param type String类型， day表示按天导出，page表示安装按页导出 必须\n * @param fileName csv文件名 必须\n * @param url  请求的url 必须\n * @param methodType 请求方法 必须 \n * @param startDateKeyStr 开始日期的键 必须 按页和按单号导出不需要\n * @param endDateKeyStr   结束日期的键 必须 按页和按单号导出不需要\n * @param isBillCode 是否按照单号导出 可选\n * @param checklistData 导出的数据，如果是单页导出 可选\n * @param queryInternal   查询时间间隔，可手动设定（以天为单位） \n * @param pageSize 导出每页的条数,默认为5000 必须\n * \n * exportBasicUtils 调用这个方法\n */\n/**\n * 示列\n *   let paramObj = {\n      paramIn: param,\n      startDateKey: \"startDate\",\n      endDateKey: \"endDate\",\n      methodType: \"post\", \n      url: getDetailUrl,\n      fileName: \"客户账单明细\",\n      totalRow: this.currRow.totalTicket,\n      queryInternal: 10,\n      allEndDate: end,\n      type: \"day\"\n    };\n    this.exportBasicUtils(paramObj);\n */\nexport const exportCsvUtils = {\n  data() {\n    return {\n      // 导出\n      btnDisabled: false, // 控制是否能点击按钮\n      exportObj: {\n        visible: false,\n        sum: 1, //一共获取数据的总次数\n        current: 0, //当前获取第几次数据\n        fileName: '导出文件名',\n        excelData: [],\n      },\n    };\n  },\n  methods: {\n    exportBasicUtils(paramObj, pageSize = 5000) {\n      // 锁定按钮 10秒之后释放\n      this.btnDisabled = true;\n      setTimeout(() => {\n        this.btnDisabled = false;\n      }, 3000);\n      const {\n        totalRow,\n        isBillCode,\n        checklistData,\n        fileName,\n        type\n      } = paramObj;\n      // 避免多次赋值\n      this.exportObj.fileName = fileName;\n      if (!totalRow) {\n        this.msg('暂无数据，无法导出');\n        return;\n      }\n      if (totalRow > 200000) {\n        this.msg('您查询到的数据量过大（最多20万条），请细化查询条件后再进行导出');\n        return;\n      }\n      // 如果是单号查询和总条数小于等于当前数据条数据是，直接导出\n      if (isBillCode || (checklistData && checklistData.length >= totalRow)) {\n        if (checklistData.length > 0) {\n          this.exportObj = {\n            fileName: fileName,\n            sum: 1, //一共获取数据的总次数\n            current: 1, //当前获取第几次数据\n            excelData: checklistData,\n            visible: true\n          };\n        } else {\n          this.msg('暂无数据，无法导出');\n        }\n        return;\n      }\n      if (type == 'day') {\n        this.exportObj = {\n          excelData: [],\n          fileName: fileName,\n          sum: totalRow, //一共获取数据的总次数\n          current: 1, //当前获取第几次数据         \n        };\n        this.finished(paramObj, paramObj.paramIn, 0);\n      } else {\n        // 一天天导 两个递归 尾递归 正常导出\n        // 一页页导\n        let num = Math.ceil(totalRow / pageSize);\n        // 需要导出多少次\n        this.exportObj = {\n          excelData: [],\n          fileName: fileName,\n          sum: num, //一共获取数据的总次数\n          current: 0, //当前获取第几次数据  \n        };\n        this.exportByPage(0, num, paramObj, pageSize);\n      }\n    },\n    // 按页导出\n    exportByPage(currentPage, num, paramObj, pageSize) {\n      if (currentPage == num) {\n        // 当页数等于总次数，则结束循环，跳出递归\n        return;\n      }\n      const {\n        methodType,\n        url,\n        paramIn\n      } = paramObj;\n      ++currentPage;\n      let params = {\n        ...paramIn,\n        pageSize: pageSize,\n        currentPage: currentPage,\n      };\n      axiosConfig(methodType, url, params, true, false)\n        .then(result => {\n          this.exportObj = {\n            ...this.exportObj,\n            sum: num,\n            current: currentPage,\n            excelData: result.data.list,\n            visible: true,\n          };\n          return this.exportByPage(currentPage, num, paramObj, pageSize);\n        })\n        .catch(res => {\n          this.msg('网络出错，导出部分数据');\n          this.exportObj = {\n            ...this.exportObj,\n            sum: num, // 总条数\n            current: num, //当前获取的数据量累加\n            excelData: [],\n            visible: true,\n          };\n        });\n    },\n    // 尾调用优化，v8引擎会自动优化\n    callback(paramObj, param, currentTotal = 1) {\n      const {\n        methodType,\n        url,\n        totalRow\n      } = paramObj;\n      axiosConfig(methodType, url, param, true, false)\n        .then(result => {\n          // 如果当前页是最后一页则结束\n          currentTotal = currentTotal + result.data.list.length;\n          if (result.data.currentPage >= result.data.totalPage) {\n            this.finished(paramObj, param, currentTotal);\n          } else {\n            param.currentPage = result.data.currentPage;\n            param.currentPage = param.currentPage + 1;\n            this.callback(paramObj, param, currentTotal);\n          }\n          this.exportObj = {\n            ...this.exportObj,\n            sum: totalRow, // 总条数\n            current: currentTotal, //当前获取的数据量累加\n            excelData: result.data.list,\n            visible: true,\n          };\n        })\n        .catch(res => {\n          this.msg('网络出错，导出部分数据');\n          this.exportObj = {\n            ...this.exportObj,\n            sum: totalRow, // 总条数\n            current: totalRow, //当前获取的数据量累加\n            excelData: [],\n            visible: true,\n          };\n        });\n    },\n    // 时间处理 判断是否到了结束的时间0\n    finished(paramObj, param, currentTotal = 0) {\n      const {\n        startDateKey,\n        endDateKey,\n        totalRow,\n        fileName,\n        allEndDate,\n        queryInternal,\n      } = paramObj;\n      // 运行是时间加\n      let interval = queryInternal ? queryInternal : 0;\n      interval = interval > 0 ? interval - 1 : 0;\n      let start = new Date(allEndDate).getTime();\n      let end = new Date(param[endDateKey]).getTime();\n      // 如果结束时间等于最终结束时间，且最终结束时间大于开始时间\n      if (start == end && start > new Date(param[startDateKey]).getTime()) {\n        param[startDateKey] = param[startDateKey];\n      } else {\n        param[startDateKey] = cloneDeep(\n          this.addSeconds(param[endDateKey], 1)\n        );\n      }\n      param[endDateKey] = cloneDeep(\n        this.addSeconds(param[startDateKey], interval)\n      );\n      //如果结束时间大于原始结束时间，则将结束时间置为原始结束时间\n      if (\n        new Date(allEndDate).getTime() <\n        new Date(param[endDateKey]).getTime() ||\n        totalRow <= 5000\n      ) {\n        param[endDateKey] = allEndDate;\n      }\n      // 如果开始时间大于原始结束时间，则程序结束,导出数据\n      if (\n        new Date(allEndDate).getTime() <\n        new Date(param[startDateKey]).getTime()\n      ) {\n        // 解决导出总条数和查询出的总条数不一致是，需要将\n        setTimeout(() => {\n          this.exportObj = {\n            ...this.exportObj,\n            fileName: fileName,\n            sum: totalRow, // 总条数\n            current: totalRow, //当前获取的数据量累加\n            excelData: [],\n            visible: true,\n          };\n        }, 1500);\n      } else {\n        // 没有结束，则继续调用下一个\n        param.currentPage = 1;\n        this.callback(paramObj, param, currentTotal);\n      }\n    },\n    addSeconds(date, num = 0) {\n      // 时间加几天，默认原始时间\n      return moment(date).add(num, 'days').format('YYYY-MM-DD');\n    },\n    msg(val, type = 'warning') {\n      this.$message({\n        showClose: true,\n        message: val,\n        type: type,\n        duration: 3000,\n      });\n    },\n  },\n};\n","// 编码对应翻译\n// 命名规则以字段名加code\n// 对象类型\nexport const userTypeCode = key => {\n  switch (key) {\n    case 0:\n      return '客户';\n      break;\n    case 1:\n      return '承包区业务员';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 3:\n      return '承包区客户';\n      break;\n    case 4:\n      return '直营业务员';\n      break;\n    case 5:\n      return '直营职能部门';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\nexport const userTypeCodeClone = key => {\n  switch (key) {\n    case 0:\n      return '客户';\n      break;\n    case 1:\n      return '承包区业务员';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 3:\n      return '承包区客户';\n      break;\n    case 4:\n      return '业务员';\n      break;\n    case 5:\n      return '直营职能部门';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 扣款模式\nexport const deductionModeCode = key => {\n  switch (key) {\n    case 0:\n      return '按天扣费';\n      break;\n    case 1:\n      return '包月扣费-日均扣';\n      break;\n    case 2:\n      return '包月扣费-一次性';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 扣款状态\nexport const deductStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '未扣款';\n      break;\n    case 1:\n      return '已扣款';\n      break;\n    case -1:\n      return '未扣款';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 结算状态\nexport const settlementStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '未结算';\n      break;\n    case 1:\n      return '已线下返款';\n      break;\n    case 2:\n      return '已线上加款';\n      break;\n    case 4:\n      return '等待结算';\n      break;\n    case 5:\n      return '需取消结算';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\nexport const settlementStatusCode2 = key => {\n  switch (key) {\n    case 0:\n      return '未结算';\n      break;\n    case 1:\n      return '已线下收款';\n      break;\n    case 2:\n      return '已线上扣款';\n      break;\n    case 4:\n      return '等待结算';\n      break;\n    case 5:\n      return '需取消结算';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 签收状态\nexport const signStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '未签收';\n      break;\n    case 1:\n      return '已签收';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 签收状态\nexport const signStatusCodes = key => {\n  switch (key) {\n    case 0:\n      return '未签收';\n      break;\n    case 1:\n      return '已签收';\n      break;\n    case 2:\n      return '第三方签收';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n// 是否状态\nexport const isnotStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '否';\n      break;\n    case 1:\n      return '是';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n\nexport const isAvgStatusCode = key => {\n  switch (key) {\n    case 1:\n      return '按均重';\n      break;\n    case 0:\n      return '按单票';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n\n//交易类型Transaction type\nexport const transactionType = key => {\n  switch (key) {\n    case 0:\n      return '扣款';\n      break;\n    case 1:\n      return '加款';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n//来源\nexport const fromType = key => {\n  switch (key) {\n    case 1:\n      return '系统自动';\n      break;\n    case 2:\n      return '手工执行';\n      break;\n    case 3:\n      return '手工导入';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\n//账单类型\nexport const billTypeCode = key => {\n  switch (key) {\n    case 0:\n      return '自营';\n      break;\n    case 1:\n      return '下级';\n      break;\n    default:\n      return '';\n  }\n};\n//账单类型\nexport const billTypeCode2 = key => {\n  switch (key) {\n    case -1:\n      return '无对象';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 4:\n      return '业务员';\n      break;\n    case 99:\n      return '下级网点';\n      break;\n    default:\n      return '';\n  }\n};\n//扣款状态\nexport const deductStatusCode2 = key => {\n  switch (key) {\n    case 0:\n      return '未扣款';\n      break;\n    case 2:\n      return '已线上扣款';\n      break;\n    case 1:\n      return '待扣款';\n      break;\n    case 3:\n      return '已线下收款';\n      break;\n    default:\n      return '';\n  }\n};\n//账单类型--收发件费用and付发件代收到付\nexport const billsTypeCode = key => {\n  switch (key) {\n    case -1:\n      return '无对象';\n      break;\n    case 0:\n      return '客户';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 4:\n      return '业务员';\n      break;\n    case 99:\n      return '下级网点';\n      break;\n    default:\n      return '';\n  }\n};\n//扣款状态--收发件费用\nexport const deductionStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '未扣款';\n      break;\n    case 1:\n      return '未扣款';\n      break;\n    case 2:\n      return '未扣款';\n      break;\n    case 4:\n      return '已线上扣款';\n      break;\n    case 6:\n      return '已线下收款';\n      break;\n    default:\n      return '';\n  }\n};\n//运输方式--收发件费用\nexport const transportTypeCode = key => {\n    switch (key) {\n        case 1:\n            return '汽运';\n            break;\n        case 2:\n            return '航空';\n            break;\n        case 3:\n            return '早航班';\n            break;\n        case 4:\n            return '晚航班';\n            break;\n        case 5:\n            return '铁运';\n            break;\n        default:\n            return '';\n    }\n};\n//物品类型--收发件费用\nexport const goodsTypeCode = key => {\n    switch (key) {\n        case 1:\n            return '物品';\n            break;\n        case 2:\n            return '文件';\n            break;\n        default:\n            return '';\n    }\n};\n//面单类型--收发件费用\nexport const mbillTypeCode = key => {\n  switch (key) {\n    case 0:\n      return '电子面单';\n      break;\n    case 1:\n      return '普通面单';\n      break;\n    case 2:\n      return '星联面单';\n      break;\n    case 3:\n      return '时效面单';\n      break;\n    default:\n      return '';\n  }\n};\n// 付业务员承包区派费\nexport const payFeeBillTypeCode = key => {\n  switch (key) {\n    case 1:\n      return '星联面单';\n      break;\n    case 2:\n      return '时效面单';\n      break;\n    case 3:\n      return '普通面单';\n      break;\n    case 4:\n      return '电子面单';\n      break;\n    default:\n      return '';\n  }\n};\n//数据来源--收发件费用\nexport const dataSourceCode = key => {\n  switch (key) {\n    case 1:\n      return '收件';\n      break;\n    case 2:\n      return '发件';\n      break;\n    case 3:\n      return '到件';\n      break;\n    case 5:\n      return '补单号';\n      break;\n    case 6:\n      return '订单转';\n      break;\n    case 4:\n      return '账单转';\n      break;\n    default:\n      return '';\n  }\n};\n//签收状态--收发件\nexport const signCode = key => {\n  switch (key) {\n    case 0:\n      return '未签收';\n      break;\n    case 1:\n      return '已签收';\n      break;\n    case 2:\n      return '第三方签收';\n      break;\n    default:\n      return '';\n  }\n};\n//费用类型\nexport const feeTypeCode = key => {\n  switch (key) {\n    case 0:\n      return '代收';\n      break;\n    case 1:\n      return '到付';\n      break;\n    default:\n      return '';\n  }\n};\n//收包仓和固定费--账单类型\nexport const billsTypeCodesNow = key => {\n  switch (key) {\n    case 0:\n      return '客户';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 4:\n      return '业务员';\n      break;\n    case 99:\n      return '下级网点';\n      break;\n    default:\n      return '';\n  }\n};\nexport const billsTypeCodes = (key, userId = 0) => {\n  switch (key) {\n    case 0:\n      return '客户';\n      break;\n    case 1:\n      return '承包区业务员';\n      break;\n    case 2:\n      return '承包区';\n      break;\n    case 3:\n      return '承包区客户';\n      break;\n    case 4:\n      if (userId >= 1000000000) {\n        return '直营父客户';\n      }\n      return '直营业务员';\n      break;\n    case 5:\n      return '直营职能部门';\n      break;\n    default:\n      return '';\n      break;\n  }\n};\nexport const deductionModel = key => {\n  switch (key) {\n    case 0:\n      return '按天扣';\n      break;\n    case 1:\n      return '包月扣-求日均每日扣';\n      break;\n    case 2:\n      return '包月扣-一次性扣';\n      break;\n    case 3:\n      return '手动扣款';\n      break;\n    case 4:\n      return '自动扣款';\n      break;\n    default:\n      return '';\n  }\n};\n//扣款状态--收丰巢面单\nexport const feeStatusCode = key => {\n  switch (key) {\n    case 1:\n      return '未扣款';\n      break;\n    case 2:\n      return '已线上扣款';\n      break;\n    case 3:\n      return '已线下收款';\n      break;\n    default:\n      return '';\n  }\n};\n//中心结算状态\nexport const ztStatusCode = key => {\n  switch (key) {\n    case 0:\n      return '待结算';\n      break;\n    case 1:\n      return '结算成功';\n      break;\n    case 2:\n      return '结算失败';\n      break;\n    case 3:\n      return '待审核';\n      break;\n    default:\n      return '';\n  }\n};\n\n//派费增值类型\nexport const valueAddedTypeCode = key => {\n  switch (key) {\n    case 5:\n      return '优鲜送';\n      break;\n    case 6:\n      return '尊享件';\n      break;\n    case 22:\n      return '当日达';\n      break;\n    case 99:\n      return '其他';\n      break;\n    default:\n      return '';\n  }\n};\n//主合同状态\nexport const contractStatusType = key => {\n  switch (key) {\n    case 1:\n      return '未提交';\n      break;\n    case 2:\n      return '审核中';\n      break;\n    case 4:\n      return '审核驳回';\n      break;\n    case 3:\n      return '审核通过';\n      break;\n    case 5:\n      return '已撤回';\n      break;\n    case 6:\n      return '生效中';\n      break;\n    case 7:\n      return '即将过期';\n      break;\n    case 8:\n      return '已过期';\n      break;\n    default:\n      return '';\n  }\n};\n//合同主体类型\nexport const subjectTypeTypes = key => {\n  switch (key) {\n    case 1:\n      return '个体';\n      break;\n    case 2:\n      return '企业';\n      break;\n    default:\n      return '';\n  }\n};\n//合同类型\nexport const contractTypesType = key => {\n  switch (key) {\n    case 1:\n      return '快递服务';\n      break;\n    default:\n      return '';\n  }\n};\n//客户状态\nexport const customerStatusType = key => {\n  switch (key) {\n    case 1:\n      return '合作中';\n      break;\n    case 2:\n      return '合作终止';\n      break;\n    default:\n      return '';\n  }\n};\n//结款周期\nexport const accountCycleType = key => {\n  switch (key) {\n    case 1:\n      return '月结';\n      break;\n    default:\n      return '';\n  }\n};\n\nfunction formatterFunc(arr, cellValue) {\n  const result = arr.filter(item => item.value === cellValue)\n  return result.length > 0 ? result[0].label : '-'\n}\n"],"sourceRoot":""}